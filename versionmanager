#!/bin/bash
#####################################################################################
#                                  Version Manager                                  #
#                                  By: Pikasannnnn                                  #
# --------------------------------------------------------------------------------- #
# Reads and writes a version file. Version file will be generated in the same level #
# as ths script. All version files of this manager expects a single file, single    #
# line of the format "version: <version>". Do not deviate, unless you wish to make  #
# changes to the script itself to accommodate.                                      #
#####################################################################################

#####################################################################################
#                            EDIT BELOW AT YOUR OWN RISK                            #
# --------------------------------------------------------------------------------- #
# Honestly, if you're going to edit, try to only edit what you need. If anything,   #
# you should really only be editting whats in get_config. Try not to add anything   #
# that requires you to change get_version_data or any other parts of the script.    #
# you might cause dependency issues or tangle the logic, which isn't good!          #
#####################################################################################

########################
# Functions

# Pretty self explanatory. It tells us how to use it.
usage() {  
cat << EOF
    Expected Flags:
        [-f] <filename>         : Name of the version file.
        [-l] <update_level>     : Updates level by 1. Level is determined left to right starting from 0 (including release component).
        [-h]                    : Displays this. Any other flags are ignored.
        [-r] <release>          : Sets release to specific value. Expects format to include "release", otherwise this is ignored.
        [-c]                    : Clears, or rather resets to 0, the version numbers. This is ignored if [-l] is used.
        [*]                     : Other flags are ignored.
EOF
}

# Gets the config details
DELIMS=""
FORMAT=""
get_config() {
    local CFG_NAME=$1
    if [ ! -f $CFG_NAME ]; then
        echo "You don't have a CFG_NAME file? Well, here's mine. Check the file $CFG_NAME!"
cat << EOF > $CFG_NAME
#############################################################################################################################
#                                              Config file for Version Manager                                              #
#############################################################################################################################
# This place is whitespace sensitive! Values with whitespaces are ignore.                                                   #
# Keep everything as \`\$<key>: <value>\`. Exactly one space between and any spaces in value is ignored.                    #
#   If you know regex. it's basically just \`^\$[^:]*: <value>\`. If you can read this, it's clear that setting doesn't.    #
#   care if there's spaces or not. If you're adding your own, just make sure you add your own logic in the script.          #
#   Check the README.md if you need help with this part.                                                                    #
# There's a lot of comment text here. If it's easier on the eyes, you can delete all the comments below to see all the      #
# nice config stuff. You can always go to the README to view the details again.                                             #
#############################################################################################################################                                                            

# Delimeters in version string. It's the stuff that separates the numbers and words like "alpha", "beta", etc.
# Default is \`-.\`, you'll see later.
\$delims: -.

# Specify your version format here.
# This is the important part, so let's get techincal:
#       -   There must be AT LEAST ONE COMPONENT.
#       -   Use the delims from earlier to separate components. Otherwise you'll get something like "majorminor" as a component label.
#       -   If you want to specify a release stage (e.g. beta, alpha, rel, etc.), name the component as \`release\`. 
#           Otherwise, we assume there isn't one.
#           -   All occurences of \`release\` will be updated simultaneously should you update (via command).
#       -   For all components (excluding \`release\`), decimal numbers are assumed unless a formatter is used.
#
# Formatters:
#   Format codes that can be placed after a component label by using {<format_code>}
#   Formatters are used to specify specific behaviors of each component when the manager updates things.
#   For example: release-major.minor.patch-dev{x3}
#
#   Format Codes:
#       -   Hexadecimals: x<int>
#               Increments with hexadecimals of length <int> instead of decimals.
#       -   Random: r<int>[s<per>]
#               Generates a pseudo-random digit of length <int> instead.
#               Use \`s\` to also include characters with <per> chance of appearance.
#       -   Custom: c<cok>
#               Uses your own custom code order specified via <cok>.
#   Tag Values:
#       <int>: a non-empty, non-zero (> 0) integer.
#       <per>: percentage (<int>%. 0=100%).
#       <cok>: custom order key of your custom code order. You can set this at the buttom under "Custom Code Zone"
# Default is \`release-major.minor.patch\`.
\$format: release-major.minor.patch

# Custom Code Zone
# This doesn't work yet, nor is it implemented yet. But I'm gonna need it soon, so putting it here for now.
# This is where you put your <cok> key-value pairs.
# All custom coder orders must follow config key-value pairs syntax (read at top of this config).
# Remember any spaces or white spaces in the values field is ignored. Use underscores "_" instead.
# Try to keep it one-line for now. We want to later allow multi-line ordering.
# This is an example entry:
# \$rels: alpha,beta,charlie
EOF
        exit 1
    else
        DELIMS=$(grep "^\$[^:]*:" $CFG_NAME | grep "delims" | sed 's/^\$[^:]*: //')
        if [ -z "$DELIMS" ]; then
            echo "No delims set. Assuming you want \`-.\`"
            DELIMS="-."
        fi

        FORMAT=$(grep "^\$[^:]*:" $CFG_NAME | grep "format" | sed 's/^\$[^:]*: //')
        if [ -z "$FORMAT" ]; then
            echo "We require at least one component in the format (as stated in the config)! Please fix!"
            echo "If you need a new config, delete the current one and we'll recreate it for you."
            exit 1
        fi
    fi
}

VERSION_FORMAT=""   # This is the order of labels
DELIM_FORMAT=""     # This is the order of delims
VERSION_VALS=""    # This is the actual values
NUM_VERSION_VALS=0
FULL_VERSION=""
get_version_data() {
    # Init default version stuff from the config format
    VERSION_FORMAT=($(echo "$FORMAT" | sed "s/[$DELIMS]/ /g"))
    DELIM_FORMAT=($(echo "$FORMAT" | sed "s/[^$DELIMS]/ /g" | sed "s/ */ /g"))

    # Check file exists and validate or create if it doesn't exist
    NUM_VERSION_VALS=${#VERSION_FORMAT[@]}
    if [ -f "$FILENAME" ]; then
        local version_vals=($(grep -E "\"version\":" "$FILENAME" | awk '{print $2}' | sed 's/"/ /g' | sed "s/[$DELIMS]/ /g"))

        if [ $NUM_VERSION_VALS -ne ${#version_vals[@]} ]; then
            echo "Version file contains ${#version_vals[@]} components, but expecting $NUM_VERSION_VALS"
            echo "Please check params or version file"
            exit 1
        fi

        VERSION_VALS=(${version_vals[@]}) # Make it global
    else
        echo "You don't have a $FILENAME file? Here's mine. Check the file $FILENAME!"

        # Inefficient, but good for one time. Build default version again before doing it later for real.
        local version_vals=($(echo ${VERSION_FORMAT[@]} | sed "s/[^ ]*/0/g"))
        local i=0
        for ((i = 0; i < NUM_VERSION_VALS; i++)); do
            PART="${VERSION_FORMAT[i]}"
            if [[ "$PART" == "release" ]]; then
                version_vals[$i]="alpha"
            else
                reset_val
                version_vals[$i]=$NEW_VAL
            fi
        done

        rebuild_version "${version_vals[@]}"
        export_json

        # echo "format: $FORMAT" > $FILENAME # This is metadata
        # echo "version: $FULL_VERSION" >> $FILENAME

        exit 1
    fi
}

rebuild_version() {
    local version_vals=($@)

    local full_version=""
    local i=0
    for ((i = 0; i < NUM_VERSION_VALS; i++)); do
        # Add the delims
        if [ $i -ne 0 ]; then
            full_version="$full_version${DELIM_FORMAT[((i - 1))]}"
        fi

        full_version="$full_version${version_vals[i]}"
    done

    FULL_VERSION=$full_version
}

export_json() {
    cat << EOF > $FILENAME
{
    "format": "$FORMAT",
    "version": "$FULL_VERSION"
}
EOF
}

OLD_VAL=""
PART=""
NEW_VAL=""
increase_val() {    # NOTE: OLD_VAL, PART are expected to have been defined. Do not use until after OLD_VAL is defined.
    if [[ -z $OLD_VAL ]] || [[ -z $PART ]]; then
        return 1    # Observe the note
    fi

    local hex_check=$(echo "$PART" | grep -E "{x[0-9]+}")
    if [[ -z $hex_check ]]; then
        NEW_VAL=$(($OLD_VAL + 1))
    else
        local num_hexes="${PART#*x}"
        num_hexes="${num_hexes%\}}"
        if [ $num_hexes -lt 1 ]; then
            echo "Whoa there, number of hex digits must be >= 1 and non-empty in the format! Version values could be broken, check that too!"
            exit 1
        fi
        
        local hex_as_dec=$((16#${OLD_VAL}))
        hex_as_dec=$((hex_as_dec + 1))
        
        local hex_val=$(printf "%0${num_hexes}x" "$hex_as_dec")
        hex_val="${hex_val: -num_hexes}"
        NEW_VAL=$hex_val
    fi
}

reset_val() {
    if [[ -z $PART ]]; then
        return 1    # Observe the note
    fi

    local hex_check=$(echo "$PART" | grep -E "{x[0-9]*}")
    if [[ -z $hex_check ]]; then
        NEW_VAL=0
    else
        local num_hexes="${PART#*x}"
        num_hexes="${num_hexes%\}}"
        echo $num_hexes

        if [ $num_hexes -lt 1 ] || [[ -z $num_hexes ]]; then
            echo "Whoa there, number of hex digits must be >= 1 and non-empty in the format!"
            exit 1
        fi

        local hex_val=$(printf "%0${num_hexes}x" "0")
        hex_val="${hex_val: -num_hexes}"
        NEW_VAL=$hex_val
    fi
}

########################
# SETUP
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# All that default value and flag stuff. Please don't edit this.
FILENAME="version.json"
UPDATE=true
RELEASE=""
VER_LVL=-1
CLEAR=false
while getopts ":r:f:l:hc" opt; do
    case "$opt" in
        l)  VER_LVL=$OPTARG
            ;;
        h)  usage
            exit 0
            ;;
        f)  FILENAME=$OPTARG
            ;;
        r)  RELEASE=$OPTARG
            ;;
        c)  CLEAR=true
            ;;
        *)
            ;;
    esac
done

# Now all that config stuff. Likewise, please don't edit this... unless you have to.
get_config "$SCRIPT_DIR/vermgr_config.cfg"

# Deal with version data. Similar, please don't edit this. Shouldn't need to unless your custom config needs it.
get_version_data

########################
# APPLYING UPDATE
# Check if clearing
if [[ $VER_LVL -lt 0 ]] && [[ "$CLEAR" == "false" ]]; then
    VER_LVL=$((NUM_VERSION_VALS+1))
fi

# Update the values as needed
echo "Executing update:"
for ((i = 0; i < NUM_VERSION_VALS; i++)); do
    PART="${VERSION_FORMAT[i]}"
    OLD_VAL=${VERSION_VALS[i]}

    if [[ "$PART" == "release" ]]; then
        if [[ ! -z $RELEASE ]]; then
            VERSION_VALS[i]=$RELEASE
        fi
    elif [ $i -eq $VER_LVL ]; then
        increase_val
        VERSION_VALS[i]=$NEW_VAL
    elif [ $i -gt $VER_LVL ]; then
        reset_val
        VERSION_VALS[i]=$NEW_VAL
    fi

    echo -e "\tUpdated $PART [\033[1;33m$OLD_VAL -> ${VERSION_VALS[i]}\033[0m]"
done

rebuild_version "${VERSION_VALS[@]}"
export_json

export VERMGR_VERSION=$FULL_VERSION